import groovy.xml.XmlUtil

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption


/**
 * 调用依赖库的3种形式
 *
 */
enum TYPE {
    /**
     * 过滤类的jar包
     * 注意当进行jar依赖的时候需要运行一下mergeManifest任务把:exclude-demo和:libraries:library的AndroidManifest.xml
     * 合并一下
     *
     */
    JAR_EXCLUDE,
    /**
     * 过滤类的aar
     */
    AAR_EXCLUDE,
    /**
     * 工程依赖
     */
    PROJECT,
    /**
     * 插件依赖依赖
     */
    PLUGIN
}

ext {
    //想要修改依赖模式就在这儿修改
    type = TYPE.PLUGIN

    projectName = "library"

    getLibJarSet = this.&getLibJarSet
    getLibSoSet = this.&getLibSoSet
    getLibAndroidManifestStr = this.&getLibAndroidManifestStr
}

afterEvaluate {
    modelChoose()
    createMergeManifest()
}

private void modelChoose() {
    if (type == TYPE.AAR_EXCLUDE) {
        dependencies {
            implementation project(configuration: 'exclude', path: ':libraries:library-exclude-aar')
        }
    } else if (type == TYPE.PROJECT) {
        dependencies {
            implementation project(getProject(projectName).path)
        }
    } else if (type == TYPE.JAR_EXCLUDE) {
        dependencies {
            implementation project(path: ':library-exclude-jar', configuration: 'exclude')
        }
    } else if (type == TYPE.PLUGIN) {
        apply plugin: 'exclude_plugin'

        excludePluginExt {
            autoDependencies = true //是否自动依赖即是否依赖过滤之后的架包
            aars {
                BaiduLBS_Android_debug {//过滤架包的名称
                    path "/libs/exclude/BaiduLBS_Android_debug.aar"  //架包的路径
                    excludeSos  'liblocSDK7b'
                }
            }
        }
    }
}

/**
 * 获取Library Project通过name
 * @param name
 * @return
 */
private Project getProject(def name) {
    for (Project pro : rootProject.allprojects) {
        if (pro.plugins.hasPlugin("com.android.library") && pro.name == name) {
            return pro
        }
    }
    return null
}

/**
 * 根据不同的产品风味创建合并Android清单文件的任务
 * @param fName
 */
private void createMergeManifest() {
    task "mergeManifest"() {
        group "Siy"

        description "合并${project.name}和${projectName}项目的AndroidManifest.xml文件"

        //如果不是工程依赖，就不能进行合并清单文件操作
        boolean mergeAndroidManifest = type == TYPE.PROJECT

        if (mergeAndroidManifest) {
            dependsOn "processReleaseManifest"
        }

        doLast {
            //合并AndroidManifest.xml的目录路径
            String mergePath = "${project.projectDir.absoluteFile}\\src\\main\\merge"
            //合并AndroidManifest.xml的详细路径
            String mergeAndroidManifestPath = "${mergePath}\\AndroidManifest.xml"

            File mergedDir = new File(mergePath)
            if (!mergeAndroidManifest) {
                //合并失败删除原来的文件
                if (mergedDir.exists()) {
                    mergedDir.delete()
                }
                System.err.println "mergeManifest任务运行需要type是TYPE.PROJECT"
            }

            //加一个断言中断执行
            assert mergeAndroidManifest

            if (!mergedDir.exists()) {
                mergedDir.mkdirs()
            }

            //\build\intermediates\merged_manifests\release
            //复制合并后的AndroidManifest.xml文件copy到指定目录,不同版本地址不一样，也有可能是（.manifestOutputDirectory.getAbsolutePath()）
            Files.copy(Paths.get(project."processReleaseManifest".manifestOutputDirectory.asFile.get().path + "\\AndroidManifest.xml"),
                    Paths.get(mergeAndroidManifestPath), StandardCopyOption.REPLACE_EXISTING)

            processMergeAndroidManifest(mergeAndroidManifestPath)
        }
    }
}


/**
 * 处理合并后的AndroidManifest.xml文件
 * @param path 合并后AndroidManifest.xml文件
 */
private void processMergeAndroidManifest(String path) {
    def targetFile = new File(path)

    //如果文件不存在就不要继续了
    if (!targetFile.exists()) {
        return
    }

    def mainifest = new XmlParser().parse(path)
    mainifest."uses-sdk".replaceNode {
        "uses-sdk"(
                "xmlns:tools='http://schemas.android.com/tools' tools:overrideLibrary": "android.support.compat," +
                        "android.support.mediacompat," +
                        "android.support.v4," +
                        "android.support.coreui," +
                        "android.support.v7.appcompat," +
                        "android.support.coreutils," +
                        "android.support.fragment," +
                        "android.support.graphics.drawable," +
                        "android.arch.lifecycle")
    }

    String packageName = mainifest.@package
    mainifest.@package = packageName.substring(0, packageName.lastIndexOf('.'))

    targetFile.withOutputStream { os ->
        os << XmlUtil.serialize(mainifest)
    }
}

/**
 * 此方法对使用该文件的Project暴露
 *
 * 返回需要的AndroidManifest.xml的路径
 * @return 默认返回当前工程默认的AndroidManifest.xml路径，type为TYPE.JAR返回当前工程和projectName合并后的AndroidManifest.xml路径
 */
String getLibAndroidManifestStr() {
    String path = "src\\main\\AndroidManifest.xml"

    //如果jar测试打开
    if (type == TYPE.JAR_EXCLUDE) {
        path = "src\\main\\merge\\AndroidManifest.xml"

        if (!(new File(project.projectDir, path).exists())) {
            System.err.println "请先运行mergeManifest"

            //加一个断言中断执行
            assert false
        }
    }

    return path
}

/**
 * 此方法对使用该文件的Project暴露
 *
 * 返回配置文件需要的so文件所在的路径
 * @return 默认返回当前工程默认的so路径，当dependencyConfig.type为TYPE.JAR返回当前工程和dependencyConfig.libModule的so路径
 */
Set<String> getLibSoSet() {
    //默认返回空的集合
    Set<String> list = []

    //如果开启测试
    if (type == TYPE.JAR_EXCLUDE || type == TYPE.AAR_EXCLUDE) {
        def tarPro = getProject(projectName)
        if (tarPro != null) {
            //添加目标库的main
            def mainSoDirs = tarPro.android.sourceSets.main.jniLibs.srcDirs
            if (mainSoDirs) {
                list.addAll(mainSoDirs)
            }
        }
    }
    return list
}

/**
 * 此方法对使用该文件的Project暴露
 *
 * 返回所有需要jar的路径
 * @return 默认不反回任何jar的路径
 */
Set<String> getLibJarSet() {
    //默认不反回任何jar
    Set<String> set = new HashSet<>()
    if (type == TYPE.JAR_EXCLUDE || type == TYPE.AAR_EXCLUDE) {
        set.addAll(fileTree(include: ['*.jar'], dir: 'libs'))
    }
    return set
}